ephimeral----short life------die and revive anytime

# Problems docker have:

1. Problem with container tools like only one host present on top of that multiple applications are present. if that host failes we loose all the containers.
2. So if first container consumes mores space means last container automatically gets killed due to space issue.
**Auto healing** means container gets created if its deleted earlier without manual intervention.
3. **Auto healing** menas contianers wil scale up or scale down as per the application traffic.
  
  1. Container Orchestration
Docker Problem:

Docker Swarm (Docker's built-in orchestration tool) is limited in features compared to Kubernetes.
Scaling and managing containers across multiple nodes is complex.
How Kubernetes Overcomes It:

Kubernetes provides advanced orchestration capabilities, such as automated container scheduling, load balancing, and scaling across clusters.
It ensures efficient resource utilization by distributing workloads optimally across nodes.
2. High Availability and Fault Tolerance
Docker Problem:

Docker alone does not handle node or container failures effectively. Restarting failed containers or rescheduling them across nodes is manual or dependent on basic Swarm features.
How Kubernetes Overcomes It:

Kubernetes provides built-in self-healing mechanisms. Failed containers are automatically restarted or replaced.
Kubernetes reschedules pods (groupings of containers) on healthy nodes in the event of node failure.
It ensures high availability through replication and distribution of pods across multiple nodes.
3. Scaling Applications
Docker Problem:

Scaling containers manually in Docker is labor-intensive. Docker Swarm offers basic scaling but lacks advanced scaling features.
How Kubernetes Overcomes It:

Kubernetes supports horizontal pod autoscaling, which adjusts the number of pods based on resource usage like CPU or memory.
It provides fine-grained control over scaling policies for different workloads.
4. Networking Challenges
Docker Problem:

Docker's default networking model is relatively basic and not suited for complex, large-scale environments.
Networking across multiple nodes and managing inter-container communication is challenging.
How Kubernetes Overcomes It:

Kubernetes introduces the Container Network Interface (CNI) model, which allows flexible and powerful networking solutions.
It provides service discovery and networking through ClusterIP, NodePort, and LoadBalancer services.
Kubernetes ensures seamless inter-pod communication across nodes with consistent networking policies.
5. Persistent Storage
Docker Problem:

Docker does not natively support persistent storage for containers. Developers have to rely on external tools or manual configurations to handle stateful applications.
How Kubernetes Overcomes It:

Kubernetes supports persistent volumes (PVs) and persistent volume claims (PVCs), providing an abstraction layer for storage.
It integrates with various storage solutions like AWS EBS, Google Cloud Storage, NFS, and Ceph.
6. Configuration Management
Docker Problem:

Docker requires manual configuration for environment variables, secrets, and application-specific parameters, leading to potential security risks.
How Kubernetes Overcomes It:

Kubernetes introduces ConfigMaps and Secrets for managing configuration data securely.
These can be injected into containers dynamically without altering the container image.
7. Monitoring and Logging
Docker Problem:

Docker provides basic logging capabilities but lacks centralized logging and monitoring for multi-container environments.
How Kubernetes Overcomes It:

Kubernetes integrates with advanced monitoring and logging tools like Prometheus, Grafana, and Fluentd.
It provides detailed metrics for cluster health, resource usage, and application performance.
8. Declarative Infrastructure
Docker Problem:

Docker uses imperative commands for container deployment, making it harder to maintain consistency across environments.
How Kubernetes Overcomes It:

Kubernetes uses declarative YAML or JSON files to define infrastructure and application state.
This approach ensures reproducibility, version control, and easier collaboration.
9. Multi-Cloud and Hybrid Deployments
Docker Problem:

Docker alone does not natively support running containers across multiple cloud providers or hybrid setups.
How Kubernetes Overcomes It:

Kubernetes is cloud-agnostic and can manage workloads across on-premises and multiple cloud environments.
It supports federated clusters, allowing seamless management of resources in multi-cloud setups.
Summary Table:
Problem with Docker	Solution by Kubernetes
Limited orchestration	Advanced orchestration and automation
No built-in fault tolerance	Self-healing and pod rescheduling
Manual scaling	Autoscaling based on resource utilization
Basic networking	Robust CNI and service discovery
Lack of persistent storage	Persistent Volumes and Claims
Manual configuration management	ConfigMaps and Secrets
Limited monitoring/logging	Integration with tools like Prometheus and Fluentd
Imperative management	Declarative infrastructure through YAML/JSON
Single-node focus	Multi-cloud, hybrid, and distributed cluster management


Kubernetes is generally installed as cluster.

