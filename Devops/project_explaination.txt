Yeah, so operators project, project deploy, deploy three. So fastest step CD pipeline, we're using Azure DevOps. Second, we're using Kubernetes for 5G micro deployment. (00:48)Third step, once the deployment is done, we're using Azure Monitor, Azure log and takes Azure app Insights, et cetera for monitoring along with Promeus and Grafana just to Azure. We, by default we integrate J by default we'll get that Azure app analytics, et cetera. But to enrich more extra monitoring and telemetry support, we are
Third step, once the deployment is done, we're using Azure Monitor, Azure log and takes Azure app Insights, et cetera for monitoring along with Promeus and Grafana just to Azure. We, by default we integrate J by default we'll get that Azure app analytics, et cetera. But to enrich more extra monitoring and telemetry support, we are using Prometheus and Grafana last for monitoring. So, okay. What is your actual practise? Can you tell me what is your role and approval? So yeah, this is my actual project overview. So we have telecom, multiple telecom services who are trying to onboard their 5G services and other next future generation telecom services onto the cloud, Azure cloud. So that's why it is called US Azure for operators. It's also available online. You can try to Google more for it and it is being developed by Microsoft and we from Mindtree are all the application development, all the Microsoft development is being by Microsoft guys from mind. We are actually support deployment and build integration and deployment process.
Next two. Okay. Can you explain more about that? Okay, there are three. One is as everyone second is building that build and test integration pipeline in Azure repository using Azure DevOps pipelines. Second thing, actually we are using continuous deployment using a KS, Azure Kubernetes service microservices 5G microservices deployment, just normal And thought step is eventually about monitoring observability. We are doing using pro and Grafana. So pro we are just using Azure monitor, Azure log analytics, Azure app, insights element and monitoring. Okay, clear first three steps. Now can you elaborate more on each and every step? So these three steps are being done across multiple people in our team. Like it's spanning around five, six people. Maybe project yourself. So first thing I'll come to my role exactly. So role particular.
So first it starts from Marco, developers application develop, chasing Marco code we configured the build from that pipeline, automated building. So how it works whenever the change, they push the change to the Azure repository. So we'll configurate the steps in such a way that we'll create a VM instance on the cloud, run their build, instal all their dependencies, packages everything first that is required for the build. And once everything is being downloaded on the Azure VM agent Linex vm, the VM will will be triggered. And then once the build is succeeded, then the corresponding unit test will be run and then functional tests will be run and then integration tests will be run that pipeline to build pipeline. (04:47)So once this build and test pipeline is being passed, then we'll try to create a docker image. Docker image is created for that particular microservice and it'll be exported to ACR R, which is Azure Container Registry publish. So C3 steps of time, which is build, test and publish. So build pipeline, entire code, whatever that is being. So build a law, we'll pull the dependencies like there will be some external third party libraries that is being used, CNET or whatever the code that has been written at or just talk a programme language on code D, Microsoft cnet. So will pull the dependencies and then we will build the code. Once the build is succeeded, then the euro test will be functional, test will be run and then the integration test will be run. Once the testing pipeline also is succeeded, then we'll publish the, we'll create a docker image from that code and we'll publish the code to ACR and Azure Container registry.
So this is the first thing. C pipeline next to CD pipeline. CD pipeline can tender. Once a docker image is being exported to a CR, the CD pipeline will be triggered the deployment. So what it'll do is there is an a KS service, I will Kubernetes service, it'll pull the docker image, whatever. So Docker, maybe Docker image has a tag that is attached. The tag is the microservice link. So our M publish CD pipeline, it'll automatically download the new image and we try to deploy using the Kubernetes. So Kubernetes, so we command, but Kubernetes, Kubernetes, Kubernetes control. (06:59)What is architecture of Kubernetes? Just to go through the Kubernetes architecture. So Kubernetes. So how many replicas, many instances need to be running, how many pods need to be created, how many nodes need to be created? What is the deployment type, whether is a deployment or SRV or something else. Configuration just a Kubernetes sample scripts and allows for deployment. So Kubernetes basic questions are what is APIs server in Kubernetes, what is controller manager scheduler? What is it? CD Atlantic. Be next to learn some cube commands. Cube CT command scanning, like how do you do cube? Apply cube rollout. Atlantic commands on Atlantic scaling scale up. So Kubernetes is done download. It'll make sure that the version will be updated on all the pods for that monitoring whenever new deployment is being kicked in. So monitoring anyway, we are already Kubernetes, same where PO car container under archite pod will be running. So PO deployment application container create just so that will be keep on tracking whether the pod is healthy or not. What is the status of the pod, what is the health of the pod? You only track your company and also it'll fix the logs from the application and it'll push the logs to where you'll see it in Grafana. (08:57)So we Kubernetes complete ci, cd and monitoring CI and DevOps CD annual Kubernetes next to monitoring and Kubernetes. Very car contain same worker. So this is the overall or complete architecture next to Kubernetes. So can you write some sample service? What is the difference between deployment and service in Kubernetes (09:55)Service cluster es, Kubernetes concepts, deployment strategies? Yeah, we used to have first two strategies under what is your build strategy, very common DevOps interview. What is your build strategy and what is your deployment strategy you're working? So first thing, deployment first to enter three kinds of deployments. So basically we ensure zero downtime deployment, very downtime. So using blue green deployment we'll deploy a new version along with the old one just you'll just switch the traffic from one version or one pod or two other pod. So that's how you'll down and then connection network version pod. So I make sure everything is ready, new version is healthy enough to accept the new and on while. So just millisecond, it'll be maybe one second glitch at lag. So will ensure that the new version will be deployed to the Kubernetes clusters with minimal down. (12:12)The new version is being tested in de. So the new strategy testing strategy build strategy, we have three environments which is de test and production environment dev, that's like the new, just whatever the developers are working on, it'll all be in dev. So once the features are properly tested, everything is fine, then the code will be pushed to test environment test we'll for around two days, three days to make sure all the integration tests will be run in test and environment and the code is correct and all that are passing. Everything is fine. The app is running fine Without any crashes, without any glitches, everything is fine. So once we get an act on dev 10 environments, we'll deploy to slowly, slowly and MA or et deploy just someone. And very slowly we'll update only first 1% of production, 1% to monitor just run 2%, 2%, 4%, 4%, 8%. (13:28)All we use exponential deployment strategy to roll out the new changes or new versions of the application across the production deployment strategy, same build strategy, test strategy. They will have three environments take production hit. So first to branching, strategy release, branch release, production cycle and they branch. So first to branch to finish we release version manage product. The production branch manager, if anything needs to be committed, a problem fix, proper production branch update and that we'll monitor the production branch, make sure that no crashes are being triggered with that new change Host, dev branch. Master branch next to particular branch. And then the release branch.
[12:21 PM, 12/21/2024] Chandu New: Yeah, master branch. And then that particular monthly cycle, mostly we are doing bimonthly two months co the monthly. So three master branch, master branch, branch changes. Next two monthly branch, monthly branch and monthly be December month, October month, chasing changes. October month round changes, October changes, surplus monthly chasing changes number month round number month chasing changes, December, car branch, branch, important features, cherry, that's branching strategy is there. Strategy testing, strategy and strategy. So next project, overview next to what is there exactly in your app Hunter. So you're saying Azure for operators, what is, let's say we're having some file sharing app. File sharing app, let's say some people Instagram log Instagram managing the photos, but it's also a file even is also a file. Everything's a file. Document is a file, photos is a failure. So OK application, it's like people can share their pictures, people can share their documents, anything in that application and then people can collectively edit with sufficient permission. Same Instagram will log files, ES comment, sharing only users access. So that's how our app is backend, database, frontend, user upload, backend law, different permission and different resources, different file formats. MIS J, next database on any cloud launch. So that is the actual block storage where all the files, all the photos will be shared. Different architecture and ture. So similarly mi, Azure for operators project and a T and idea which let's, so we have a 5G service. Okay, so hello. (18:18)So in the 5G service up PF user plane function on matter, user plane function. So there are multiple services inside that 5G core network architecture of Azure for operators project. But basically one of the service that we are working on is VP of service, which is user plane function. eService M, what is this service exactly does is it routes the user data or it routes the traffic from mobile devices to external networks like mobile, mobile device, wifi on JC just to data pack, port data, mobile carrier data, data, data, internet network, data carrier next to, I dunno, much deep into that project, I mean deep into that service. But just an overview is, so this service routes the user data from the mobile devices to the internet to other external networks. Like let's say if you're communicating from one device to other device, it routes it.
[12:22 PM, 12/21/2024] Chandu New: Speaker 1 (19:50): Next two, it also supports different packets filtering and only websites only operators block just unwanted websites. So there are violating websites and some other things like filtering, basically filtering it'll do and it'll make sure that properly the traffic is forwarded and other things. So this is how the service works on that. So there are, how many services are there and there are multiple services, but we work on this particular service in this 5G Azure for operators project. The services, the UP service, it has the main and it routes the user data from mobile devices, networks, the internet. And it also works in filtering the traffic properly and make sure that unwanted websites or any other thing will be blocked. Something. These are primary features of this service and it does some other things also like traffic forwarding, cause enforcement, some other things. But yeah, I don't know much into other things. But yeah, this is the brief format. But what we're doing, we're building that entire service. Developers will do the changes and we'll get the changes, we'll build the service, we'll roll out the new version of the service using a KS, Azure Kubernetes service in Azure and using the bluegreen deployment and eventually we'll monitor using Prometheus and raf Speaker 2 (21:37): Brownfield Greenfield. We have a different screen for each site Speaker 1 (22:03): Deploy issues. Question. So what are the different kinds of issues, sites and the issues and proper word, what are the different kinds of issues you used to face in your application? I mean application deployment or in your role and what are the challenges that you have faced? Questions. So Dan, key prepare, just Google search, what kind of challenges Speaker 2 (22:49): But notification chart, what is the toughest thing that you face? Have you overcome that? Yeah, Speaker 1 (23:06): I think construct, just call on matter, like managing the different microservices, managing different in dependencies between microservices and resource use issues, Kubernetes and resources. Repo, insufficient memory, insufficient CP take a common example. Let roll back strategy. So roll strategy, 4%, 8%, almost 16%, 32% approve should I think next two. How come it is not getting caught earlier in the 32% rollout and issue. So could be anything artist, case developer do like with scenario. So that time what we do, we pause and then we as a developers for the hot fix and then we retake the new build and then we again basically a rollback let's so either build two options rolling back to previous version, previous one option, second option in, so process it'll first the rollback mechanism, other rollback strategy.
[12:22 PM, 12/21/2024] Chandu New: Speaker 1 (25:20): So rollback strategy and ID first, we did not have a clear idea initially. So that time we faced lots of issues, how to do the rollback and then we checked out a plan. So rollback strategy and so basically may update just to this is how the latest, latest Purdue at the time, only two version, the previous one, current one. Next Purdue current will become previous and new will become current. 1, 2, 3 versions, answer one, two version and next second version originally. So second version is one next third update version be two will be previous and one will be deleted forever next to four. Four will be current. Three will be previous. So at any time only two things will be there in the Kubernetes is one version and the previous version. So previous version. But there could be some problems again in the country already. So overall much broader set of things and you should be ready for such kind of questions. It's all like learning from the experience of San Dev particularly name, observation, experience maybe. Okay, what is this? What is this? R what? Okay, what is this in? What is docker application architecture. Elaborate. Speaker 2 (28:05): Okay. Okay. What is the deployment strategy Speaker 1 (29:19): Is we complete the project. It's Azure operator 5G service telecom for telecom operator. I'm where the services 5G operator data. All the operators are moving to cloud telecom operators, especially Azure. Got some product for a big operator and that's where this Azure for operator project has been started and the developers are doing the changes. But we are from my three supporting build and deployment process, project explanation, ci, cd monitoring roles and responsibilities. So basically we keep doing the issues each production and issues which how the app is doing, how is the Kubernetes cluster is doing health, the problem, problem, the alerting, Kubernetes future of testing, testing, I don't know. DevOps in the cost study testing. Another different thing, testing future going forward. All the testing will be automated by ai, artificial intelligence. So just to develop test in which language automatic, although not hundred 60%, that's why I don't recommend any form of testing is going to be power taken by DevOps multiple down and make sure all these rollouts rolls updates. Basically Linux, different data centre because in the country all their data is moved to cloud together. So I'm the only DevOps who is basically overseeing all these operations. DevOps centre there is very less development thing. Developer operations, very less developer thing, but more of operations operation once the developer build customer going to stay for at least few years. Testing, I don't recommend
